#!@PATH_PERL@
eval 'exec @PATH_PERL@ -S $0 ${1+"$@"}'
    if $running_under_some_shell;
##
##  asubst -- Area Substitution
##  Copyright (c) 1997,1998,1999 Ralf S. Engelschall, All Rights Reserved.
##

use strict;
use warnings;

use lib '@INSTALLPRIVLIB@';
use lib '@INSTALLARCHLIB@';

use Getopt::Long 2.13;

my $_my_debug = 0;

#
#   process command line
#
sub usage
{
    print STDERR "Usage: asubst [options] [file]\n";
    print STDERR "\n";
    print STDERR "Options:\n";
    print STDERR
        "  -o, --outputfile=<file>  set output file instead of stdout\n";
    print STDERR "  -v, --verbose            verbose mode\n";
    exit(1);
}
use vars qw/ $opt_v /;

BEGIN { $opt_v = 0; }
my $opt_o;
$Getopt::Long::bundling      = 1;
$Getopt::Long::getopt_compat = 0;
if (
    not Getopt::Long::GetOptions(
        "v|verbose"      => \$opt_v,
        "o|outputfile=s" => \$opt_o,
    )
    )
{
    usage();
}

$opt_o //= '-';

sub verbose
{
    my ($str) = @_;
    if ($opt_v)
    {
        print STDERR "** ASubst:Verbose: $str\n";
    }
}

sub error
{
    my ($str) = @_;
    print STDERR "** ASubst:Error: $str\n";
    exit(1);
}

#
#   open input file and read into buffer
#
use TheWML::Backends;

my $foo_buffer = TheWML::Backends->input( \@ARGV, \&error, \&usage );

#
#   processing loop
#

#  ExpandBlock -- expand a delimited and perhaps nested block structure
#
#  ($rc, $buffer) = ExpandBlock($buffer, \&cnvpre, $startdel, \&cnvin, $enddel, \&cnvpost, $level);
#
sub ExpandBlock
{
    return ExpandBlockMore(@_);
}

#   This subvariant is used to split the input into
#   segments which only contain one block, but this
#   itself can be still nested.
#   input: ... < < > > ... < > < < > < > > ...
#   inputs for ExpandBlockOne: "... < < > > ...", "< >", "< < > < > > ...", #   ...
#
sub ExpandBlockMore
{
    my ( $buffer, $cnvpre, $opendel, $cnvin, $closedel, $cnvpost, $level ) = @_;
    my ( $rc, $opened, $offset, @segment, $del, $openidx, $closeidx );
    my ( $bufferN, $s, $e, $i, $data );

    #
    #   first, check for corresponding delimiters
    #   and determine (nested) block segment positions
    #
    $opened  = 0;
    $offset  = 0;
    @segment = (0);
    while (1)
    {
        $openidx  = index( $buffer, $opendel,  $offset );
        $closeidx = index( $buffer, $closedel, $offset );
        _wml_back_end_asubst_debug( 1,
            "buffer=<>, off=$offset, o=$openidx, c=$closeidx\n" );
        if ( $openidx == -1 && $closeidx == -1 )
        {
            #   both not found, stop now
            push( @segment, length($buffer) );
            last;
        }
        if ( $openidx != -1 && $closeidx != -1 )
        {
            #   both found, take closer one
            ( $offset, $del, $opened ) = (
                $openidx < $closeidx
                ? ( $openidx, $opendel, $opened + 1 )
                : ( $closeidx, $closedel, $opened - 1 )
            );
        }
        else
        {
            #   one not found, take other one
            ( $offset, $del, $opened ) = (
                $openidx != -1
                ? ( $openidx, $opendel, $opened + 1 )
                : ( $closeidx, $closedel, $opened - 1 )
            );
        }
        $offset = $offset + length($del);

        #   still reached a complete segment
        if ( $opened == 0 )
        {
            push( @segment, $offset );
        }
    }
    if ( $opened != 0 )
    {
        return ( 1, "invalid number of opening and closing delimiters" );
    }

    #
    #   now process each segment
    #
    $bufferN = '';
    for ( $i = 0 ; $i < $#segment ; )
    {
        $s = $segment[$i];
        $e = $segment[ $i + 1 ];
        $i++;
        $data = substr( $buffer, $s, ( $e - $s ) );
        my $rc;
        ( $rc, $data ) = ExpandBlockOne(
            $opendel, $closedel, $data,    $cnvpre, $opendel,
            $cnvin,   $closedel, $cnvpost, $level
        );
        if ( $rc != 0 )
        {
            return ( $rc, $data );
        }
        $bufferN .= $data;
    }

    return ( 0, $bufferN );
}

#   This subvariant operates only on a buffer which
#   contains one block (which can be still nested).
#   input: "... < < > > ... "
#
sub ExpandBlockOne
{
    my (
        $opendel, $closedel, $buffer,  $cnvpre, $startdel,
        $cnvin,   $enddel,   $cnvpost, $level
    ) = @_;
    my ( $openidx, $closeidx, $prefix, $postfix, $inner, $rc, $data );

    $openidx = index( $buffer, $opendel );
    $closeidx = rindex( $buffer, $closedel );

    #   either both exist or both not exist
    if ( $openidx == -1 && $closeidx == -1 )
    {
        if ( $level == 0 )
        {
            $data = $cnvpre->( $buffer, $level );    # could also be cnvpost..
        }
        else
        {
            $data = $buffer;
        }
        return ( 0, $data );
    }
    else
    {
        #   convert prefix
        $prefix = $cnvpre->( substr( $buffer, 0, $openidx ), $level );
        _wml_back_end_asubst_debug( $level, "ExpandBlockOne::prefix", $prefix );

        #   recursive into the body
        $inner = substr(
            $buffer,
            $openidx + length($opendel),
            $closeidx - ( $openidx + length($opendel) )
        );
        _wml_back_end_asubst_debug( $level, "ExpandBlockOne::inner", $inner );
        ( $rc, $inner ) = ExpandBlockMore(
            $inner,    $cnvpre,  $opendel, $cnvin,
            $closedel, $cnvpost, $level + 1
        );
        _wml_back_end_asubst_debug( $level, "ExpandBlockOne::inner", $inner );
        $inner = $cnvin->( $inner, $level + 1 );
        _wml_back_end_asubst_debug( $level, "ExpandBlockOne::inner", $inner );

        #   convert postfix
        $postfix = $cnvpost->(
            substr(
                $buffer,
                $closeidx + length($closedel),
                length($buffer) - ( $closeidx + length($closedel) )
            ),
            $level
        );
        _wml_back_end_asubst_debug( $level, "ExpandBlockOne::postfix",
            $postfix );

        return ( $rc, $prefix . $inner . $postfix );
    }
}

#   A debugging function
sub _wml_back_end_asubst_debug
{
    my ( $level, $name, $str ) = @_;
    my ( @o, $l );

    # return if ($_my_debug == 0);
    return;

    push( @o, "    " x $level . "### $name =\n" );
    if ( $str eq '' )
    {
        push( @o, "    " x $level . "    ||\n" );
    }
    else
    {
        foreach $l ( split( '\n', $str ) )
        {
            push( @o, "    " x $level . "    |$l|\n" );
        }
    }
    print STDERR @o;

    return;
}

sub cnvpre
{
    my ( $str, $level ) = @_;

    return '' if $str eq '';
    return $str;
}

sub cnvin
{
    my ( $str, $level ) = @_;

    return '' if $str eq '';

    my @SCMD;
    $str =~
        s|\[\[(s(.)[^\2]+?\2[^\2]*?\2[igosme]*?)\]\]|push(@SCMD, $1), ''|sge;
    $str =~
        s|\[\[(tr(.)[^\2]+?\2[^\2]+?\2[igosme]*?)\]\]|push(@SCMD, $1), ''|sge;
    foreach my $scmd (@SCMD)
    {
        eval "\$str =~ $scmd;";
    }
    return $str;
}

sub cnvpost
{
    my ( $str, $level ) = @_;

    return '' if $str eq '';
    return $str;
}

my $rc;
if ( index( $foo_buffer, '{:' ) != -1 )
{
    ( $rc, $foo_buffer ) =
        ExpandBlock( $foo_buffer, \&cnvpre, '{:', \&cnvin, ':}', \&cnvpost, 0 );
}

if ($rc)
{
    print STDERR "aSubst:Error: $foo_buffer\n";
    exit(1);
}

TheWML::Backends->out( $opt_o, \&error, [$foo_buffer] );

exit(0);

##EOF##
__END__

=encoding utf8

=head1 NAME

asubst - Area Substitution

=head1 SYNOPSIS

B<asubst>
[B<-o> I<outputfile>]
[B<-v>]
[I<inputfile>]

=head1 DESCRIPTION

The F<asubst> program reads I<inputfile> or from C<stdin> and performs the
following action: Characters and substrings are substituted according to
Perl-like substitution commands enclosed by surrounding area delimiters.  The
substitution commands recognized are

   [[s/pattern/string/options]]
   [[tr/input/output/options]]

and the areas are defined by blocks delimited via

  {: ... :}

=head1 EXAMPLE

  {: [[s/ä/&auml;/]] [[s/ü/&uuml;/]]
  Foo Bar Baz Quux with Umlauts ä and ü
  :}

=head1 OPTIONS

=over

=item B<-o> I<outputfile>

This redirects the output to I<outputfile>. Usually the output will be send to
C<stdout> if no such option is specified or I<outputfile> is "C<->".

=item B<-v>

This sets verbose mode where some processing information will be given on the
console.

=back

=head1 AUTHOR

 Ralf S. Engelschall
 rse@engelschall.com
 www.engelschall.com

=cut

##EOF##
# vim:ft=perl
